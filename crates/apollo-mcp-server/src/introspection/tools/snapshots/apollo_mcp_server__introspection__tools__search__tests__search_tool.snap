---
source: crates/apollo-mcp-server/src/introspection/tools/search.rs
expression: content
---
enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  role: UserRole!
  profile: UserProfile
  posts: [Post!]!
  comments: [Comment!]!
  notifications: [Notification!]!
  preferences: UserPreferences!
}

type Post implements Node & Content {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  status: ContentStatus!
  author: User!
  metadata: JSON
  comments: [Comment!]!
  media: [Media!]!
  tags: [Tag!]!
  analytics: PostAnalytics!
}

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  author: User!
  post: Post!
  parentComment: Comment
  replies: [Comment!]!
  reactions: [Reaction!]!
}

type Media {
  id: ID!
  type: MediaType!
  url: String!
  thumbnail: String
  metadata: MediaMetadata!
  uploader: User!
}

type Reaction {
  id: ID!
  type: String!
  user: User!
  comment: Comment!
  createdAt: DateTime!
}

type Notification {
  id: ID!
  type: String!
  priority: NotificationPriority!
  message: String!
  recipient: User!
  read: Boolean!
  createdAt: DateTime!
  metadata: JSON
}

type Query {
  node(id: ID!): Node
  user(id: ID!): User
  post(id: ID!): Post
  posts(filter: PostFilter): [Post!]!
  comments(postId: ID!): [Comment!]!
  notifications(filter: NotificationFilter): [Notification!]!
  search(query: String!): SearchResult!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createPost(input: CreatePostInput!): Post!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
  createComment(input: CreateCommentInput!): Comment!
  deletePost(id: ID!): Boolean!
  uploadMedia(file: Upload!): Media!
  updateUserPreferences(id: ID!, preferences: UserPreferencesInput!): UserPreferences!
}
